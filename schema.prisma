generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  fullName   String
  role       Role
  properties Property[] @relation("OwnerProperties")
  contracts  Contract[] @relation("TenantContracts")
  sentMessages    Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  createdAt  DateTime   @default(now())
}

model Property {
  id          String           @id @default(uuid())
  owner       User             @relation("OwnerProperties", fields: [ownerId], references: [id])
  ownerId     String
  title       String
  description String
  address     String
  type        String
  area        Int
  rentPrice   Decimal
  status      PropertyStatus
  contracts   Contract[]
  maintenances Maintenance[]
  createdAt   DateTime         @default(now())
}

model RentalContract {
  id         String     @id @default(uuid())
  property   Property   @relation(fields: [propertyId], references: [id])
  propertyId String
  tenant     User       @relation("TenantContracts", fields: [tenantId], references: [id])
  tenantId   String
  startDate  DateTime
  endDate    DateTime
  deposit    Decimal
  status     ContractStatus
  payments   Payment[]
  documents  Document[]
  createdAt  DateTime   @default(now())
}

model Payment {
  id           String     @id @default(uuid())
  contract     Contract @relation(fields: [contractId], references: [id])
  contractId   String
  paymentDate  DateTime
  amount       Decimal
  paymentMode  String
  receiptUrl   String
}

model Maintenance {
  id          String     @id @default(uuid())
  property    Property   @relation(fields: [propertyId], references: [id])
  propertyId  String
  date        DateTime
  type        String
  cost        Decimal
  description String
}

model Message {
  id          String     @id @default(uuid())
  sender      User       @relation("SenderMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User       @relation("ReceiverMessages", fields: [receiverId], references: [id])
  receiverId  String
  content     String
  sentAt      DateTime   @default(now())
}

model Document {
  id          String     @id @default(uuid())
  contract    Contract @relation(fields: [contractId], references: [id])
  contractId  String
  name        String
  fileUrl     String
  uploadedAt  DateTime   @default(now())
}

enum Role {
  OWNER
  TENANT
  ADMIN
}

enum PropertyStatus {
  AVAILABLE
  RENTED
}

enum ContractStatus {
  ACTIVE
  ENDED
}
